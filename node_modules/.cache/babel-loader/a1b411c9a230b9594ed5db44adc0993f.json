{"ast":null,"code":"var _jsxFileName = \"/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/HW/assignment_2/src/views/App.js\",\n    _s = $RefreshSig$();\n\nimport data, { NOTE_TYPE, NO_PROJECT } from \"../data/data\";\nimport Project from \"../components/Project\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/styles.css';\nimport { useState } from \"react\";\nimport AddNote from \"../components/AddNote\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projects = new Array();\nconst noprojects = new Array();\n\n(function () {\n  Object.keys(data).map((project, idx) => {\n    if (project !== NO_PROJECT) {\n      projects.push(project); //<Project key={idx} project={project} notes={data[project]}/>)\n      //console.log(\"notes: \", data[project]);\n    } else {\n      noprojects.push( /*#__PURE__*/_jsxDEV(Project, {\n        project: project,\n        notes: data[project]\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 29\n      }, this));\n    }\n  });\n})();\n\nconst allProjects = new Array();\n\n(function () {\n  Object.keys(data).map((project, idx) => {\n    allProjects.push(project);\n  });\n})();\n\nconst variants = [\"info\", \"primary\", \"secondary\", \"success\", \"danger\", \"warning\", \"info\", \"light\"];\n\nconst random = () => {\n  return variants[Math.floor(Math.random() * variants.length)];\n};\n\nclass textNote {\n  constructor() {\n    this.type = NOTE_TYPE.TEXT;\n    this.title = \"\";\n    this.text = \"\";\n  }\n\n}\n\nclass linkNote {\n  constructor() {\n    this.type = NOTE_TYPE.LINK;\n    this.url = \"\";\n    this.text = \"\";\n  }\n\n}\n\nconst App = () => {\n  _s();\n\n  const [toRender, setToRender] = useState(allProjects);\n\n  const addNote = (selectedProject, selectedType, isTitlePresent, title, isTextPresent, text, isUrlPresent, url) => {\n    if (allProjects.includes(selectedProject)) {\n      Object.keys(allProjects).map((project, idx) => {\n        if (allProjects[project] === selectedProject) {\n          if (selectedType === NOTE_TYPE.TEXT) {\n            console.log(data[selectedProject]); //data[selectedProject].push({title: title, text: text})\n            //note = new textNote(title,text)\n          } else {\n            console.log(data[selectedProject]);\n            data[selectedProject].push({\n              url: url,\n              text: text\n            }); //note = new linkNote(url,text)\n          }\n        }\n\n        console.log(\"data: \", data);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar navbar-light bg-light\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"navbar-brand mb-0 h1 mx-auto\",\n          children: \"All we do is take notes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center bg-light\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-group\",\n        role: \"group\",\n        \"aria-label\": \"Basic example\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-light\",\n          onClick: () => setToRender(allProjects),\n          children: \"All Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), Object.keys(data).map((project, idx) => project != NO_PROJECT ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-light\",\n          onClick: () => setToRender([project]),\n          children: project\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 33\n        }, this) : \"\"), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-info\",\n          \"data-bs-toggle\": \"collapse\",\n          \"data-bs-target\": \"#collapseExample\",\n          children: \"+ Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"collapse mx-auto\",\n      id: \"collapseExample\",\n      children: /*#__PURE__*/_jsxDEV(AddNote, {\n        callback: addNote,\n        projects: allProjects\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: Object.keys(data).map((project, idx) => toRender.includes(project) ? /*#__PURE__*/_jsxDEV(Project, {\n        project: project,\n        notes: data[project]\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }, this) : \"\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 14\n  }, this);\n};\n\n_s(App, \"Tu6TeBBBhg2Zyj7Rmidnfi/r6nY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/shebthebat/Documents/NEU/Sem 5/CS 7580/HW/assignment_2/src/views/App.js"],"names":["data","NOTE_TYPE","NO_PROJECT","Project","useState","AddNote","projects","Array","noprojects","Object","keys","map","project","idx","push","allProjects","variants","random","Math","floor","length","textNote","type","TEXT","title","text","linkNote","LINK","url","App","toRender","setToRender","addNote","selectedProject","selectedType","isTitlePresent","isTextPresent","isUrlPresent","includes","console","log"],"mappings":"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","sourcesContent":["import data, { NOTE_TYPE, NO_PROJECT } from \"../data/data\"\nimport Project from \"../components/Project\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../styles/styles.css';\nimport {useState} from \"react\";\nimport AddNote from \"../components/AddNote\"\n\nconst projects = new Array();\nconst noprojects = new Array();\n\n(function(){\n    \n\n    Object.keys(data).map ((project, idx) => {\n        if (project !== NO_PROJECT) {\n            projects.push(project)\n                        //<Project key={idx} project={project} notes={data[project]}/>)\n                        //console.log(\"notes: \", data[project]);\n        } else {\n            noprojects.push(<Project key={idx} project={project} notes={data[project]}/>);\n        }\n    })\n})();\n\nconst allProjects = new Array();\n(function() {\n    \n\n    Object.keys(data).map ((project, idx) => {\n        allProjects.push(project)\n    })\n})();\n\nconst variants = [\"info\",\"primary\",\"secondary\",\"success\",\"danger\",\"warning\",\"info\",\"light\"]\n\nconst random = () => {\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nclass textNote {\n    type= NOTE_TYPE.TEXT;\n    title= \"\";\n    text= \"\";\n}\n\nclass linkNote  {\n    type = NOTE_TYPE.LINK;\n    url = \"\";\n    text= \"\";\n}\n\n\nconst App = () => {\n    \n    const [toRender, setToRender] = useState(allProjects);\n\n    const addNote = (selectedProject,selectedType,isTitlePresent,title,isTextPresent,text,isUrlPresent,url) => {\n        \n        if (allProjects.includes(selectedProject)) {\n            Object.keys(allProjects).map ((project, idx) => {\n            \n                if(allProjects[project] === selectedProject) {\n                    if (selectedType === NOTE_TYPE.TEXT) {\n                        console.log(data[selectedProject])\n                        //data[selectedProject].push({title: title, text: text})\n                        //note = new textNote(title,text)\n                    } else {\n                        console.log(data[selectedProject])\n                        data[selectedProject].push({url: url, text: text})\n                        //note = new linkNote(url,text)\n                    }\n                }\n                console.log(\"data: \", data)\n            })\n        }\n        \n        \n    }\n\n    return ( <div>\n                <nav className=\"navbar navbar-light bg-light\">\n                    <div className=\"container-fluid\">\n                        <span className=\"navbar-brand mb-0 h1 mx-auto\">All we do is take notes.</span>\n                    </div>\n                </nav>\n\n                <div className=\"text-center bg-light\">\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => setToRender(allProjects)}>\n                            All Notes\n                        </button>\n                        { Object.keys(data).map((project,idx) =>\n                                ((project != NO_PROJECT) ? \n                                <button type=\"button\" className=\"btn btn-light\" onClick={() => setToRender([project])}>\n                                    {project}\n                                </button>: \"\")\n                        )}\n                        <button type=\"button\" className=\"btn btn-info\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseExample\">\n                            + Add\n                        </button>\n                    </div>\n                    \n                </div>\n                <div className=\"collapse mx-auto\" id=\"collapseExample\">\n                    <AddNote callback={addNote} projects={allProjects}/>\n                </div>\n                <div className=\"container\">\n                    { Object.keys(data).map((project,idx) => \n                        ((toRender.includes(project)) ?\n                            <Project key={idx} project={project} notes={data[project]}/> : \"\")\n                        )}\n                </div>\n            </div>\n    )\n}\n    \n\nexport default App;"]},"metadata":{},"sourceType":"module"}